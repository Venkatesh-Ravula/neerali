---
# (c) Copyright IBM Corporation
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Extract OS info from image name of server {{ neerali_server_config.name }}
  ansible.builtin.set_fact:
    _neerali_openstack_os_data: >-
      {{
        {
          'type': neerali_server_config.image.split('-')[0] | lower,
          'version': neerali_server_config.image.split('-')[1].split('.')[0:2] | join('.')
        }
      }}
  when: neerali_server_action | default('') == 'create'

- name: Extract cloud-init yaml for server {{ neerali_server_config.name }}
  ansible.builtin.set_fact:
    _neerali_openstack_cloud_init: "{{ neerali_server_config.cloud_init | from_yaml }}"
  when: neerali_server_action | default('') == 'create'

- name: Reset network nics payload for each server
  ansible.builtin.set_fact:
    _neerali_openstack_network_nics: []
  when: neerali_server_action | default('') == 'create'

- name: Generate nics payload for server {{ neerali_server_config.name }}
  ansible.builtin.set_fact:
    _neerali_openstack_network_nics: >-
      {{
        _neerali_openstack_network_nics +
        [
          {
            'net-name' : network_name
          }
        ]
      }}
  loop: "{{ neerali_server_config.networks }}"
  loop_control:
    loop_var: network_name
  when:
    - neerali_server_action | default('') == 'create'
    - neerali_server_config.networks is defined

- name: Set default server count as 1 if count is not defined
  ansible.builtin.set_fact:
    _neerali_server_count: "{{ neerali_server_config.count | default(1) }}"
  when: neerali_server_action | default('') == 'create'

- name: Reset instance names to volumes map for each node
  ansible.builtin.set_fact:
    neerali_openstack_server_volume_map: {}
  when: neerali_server_action | default('') == 'create'

- name: Generate dynamic prefix name for server node
  ansible.builtin.set_fact:
    _neerali_openstack_server_prefix: "{{ range(1000,9999) | random }}"

- name: Create instance names to volumes map for server {{ neerali_server_config.name }}
  ansible.builtin.set_fact:
    neerali_openstack_server_volume_map: >-
      {{
        neerali_openstack_server_volume_map | combine(
          {
            (
              '%s-%s-%s-%02d'|format(
                neerali_server_config.cluster,
                _neerali_openstack_server_prefix,
                neerali_server_config.name,
                item
              )
            ): []
          }
        )
      }}
  loop: "{{ range(1, _neerali_server_count|int + 1) }}"
  when: neerali_server_action | default('') == 'create'

- name: Create volumes
  vars:
    neerali_volume_action: create
    neerali_volume_data: "{{ neerali_server_config.volumes }}"
  ansible.builtin.include_tasks: volume.yaml
  when:
    - neerali_server_action | default('') == 'create'
    - neerali_server_config.volumes is defined

- name: Create compute instances for {{ neerali_server_config.name }}
  openstack.cloud.server:
    cloud: "{{ neerali_openstack_auth }}"
    state: present
    name: "{{ item.key }}"
    image: "{{ neerali_server_config.image }}"
    flavor: "{{ neerali_server_config.flavor }}"
    nics: "{{ _neerali_openstack_network_nics }}"
    volumes: "{{ item.value }}"
    terminate_volume: "{{ true | bool }}"
    timeout: "{{ neerali_openstack_api_timeout }}"
    userdata: "{{ neerali_server_config.cloud_init }}"
  async: "{{ neerali_openstack_api_timeout }}"
  poll: 0
  register: _neerali_openstack_async_servers
  loop: "{{ neerali_openstack_server_volume_map | dict2items }}"
  when: neerali_server_action | default('') == 'create'

- name: Wait for all computes to be created for {{ neerali_server_config.name }}
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: _neerali_openstack_systems
  until: _neerali_openstack_systems.finished
  retries: "{{ (neerali_openstack_api_timeout / 10) | int }}"
  delay: 10
  loop: "{{ _neerali_openstack_async_servers.results }}"
  loop_control:
    label: "{{ item.ansible_job_id }}"
  when:
    - neerali_server_action | default('') == 'create'
    - _neerali_openstack_async_servers is defined

- name: Add systems to openstack provisioned list
  ansible.builtin.set_fact:
    neerali_openstack_systems_provisioned: >-
      {{
        neerali_openstack_systems_provisioned | default([]) +
        [
          {
            'name': item.server.name,
            'ansible_host': item | json_query('server.addresses.' + neerali_server_config.networks.0 + '[0].addr'),
            'ansible_ssh_user': _neerali_openstack_cloud_init.users.0.name,
            'type': neerali_server_config.type,
            'cluster': neerali_server_config.cluster,
            'os': _neerali_openstack_os_data,
            'roles': neerali_server_config.roles,
            'volumes': neerali_openstack_server_volume_map[item.server.name],
            'driver': neerali_server_config.driver
          }
        ]
      }}
  loop: "{{ _neerali_openstack_systems.results }}"
  loop_control:
    label: "{{ item.server.name }}"
  when:
    - neerali_server_action | default('') == 'create'
    - _neerali_openstack_systems is defined

- name: Delete compute instances
  openstack.cloud.server:
    cloud: "{{ neerali_openstack_auth }}"
    name: "{{ item.name }}"
    state: absent
  loop: "{{ neerali_openstack_systems_provisioned }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - neerali_server_action | default('') == 'delete'
