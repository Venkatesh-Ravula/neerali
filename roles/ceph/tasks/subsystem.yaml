---
# (c) Copyright IBM Corporation
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: "Gather the NVMe-oF daemons for {{ nvmeof_service.name }}"
  ansible.builtin.command:
    cmd: >-
      ceph orch ps
      --daemon_type nvmeof
      --service_name {{ nvmeof_service.name }}
      --format json
  changed_when: true
  register: _daemon_results

- name: Gather the list of NVMe-oF gateways
  vars:
    _query: "[?status==`1`].{hostname: hostname, port: ports[0]}"
  ansible.builtin.set_fact:
    _nvmeof_gw: >-
      {{
        _daemon_results.stdout |
        from_json |
        community.general.json_query(_query)
      }}
    _admin_gw: >-
      {{
        _daemon_results.stdout |
        from_json |
        community.general.json_query(_query) |
        first
      }}

- name: Cache the list of NVMe-oF gateways identified
  ansible.builtin.set_fact:
    cacheable: true
    neerali_nvmeof_gws: >-
      {{
        (
          neerali_nvmeof_gws | default([])
        ) + (
          _nvmeof_gw | map(attribute='hostname')
        )
      }}

- name: Perform NVMe-oF target configuration.
  when:
    - neerali_ceph_config[neerali_ceph_cluster_name]['nvmeof']['target'][nvmeof_service.group] is defined
    - neerali_ceph_config[neerali_ceph_cluster_name]['nvmeof']['target'][nvmeof_service.group].keys() | length > 0
  vars:
    _nqns: >-
      {{
        neerali_ceph_config[neerali_ceph_cluster_name]['nvmeof']['target'][nvmeof_service.group].keys()
      }}
  block:
    - name: Create the NVMe-oF subsystems
      vars:
        _cli_args: >-
          {{
            neerali_ceph_config[neerali_ceph_cluster_name]['nvmeof']['target'][nvmeof_service.group][item]['options'] |
            default({}) |
            neerali.general.dict2args
          }}
        _log: "{{ neerali_ceph_logdir ~ '/nvmeof_' ~ nvmeof_service.group ~ '_' ~ _index }}"
      ansible.builtin.shell:
        cmd: |
          set -euxo pipefail
          podman run --rm {{ neerali_ceph_config[neerali_ceph_cluster_name]['nvmeof']['cli_image'] }} \
              --format json \
              --server-address {{ _admin_gw.hostname }} \
              --server-port {{ _admin_gw.port }} \
              subsystem add \
              --subsystem {{ item }} \
              {{ _cli_args }} | tee {{ _log ~ '.log' }}
          touch {{ _log ~ '.success' }}
        creates: "{{ _log ~ '.success' }}"
      loop: "{{ _nqns }}"
      loop_control:
        label: "{{ item }}"
        index_var: _index

    - name: Create the listeners for the subsystem
      vars:
        nvme_admin_gw: "{{ _admin_gw }}"
        nvmeof_subsystem: "{{ _subsystem ~ '.' ~ nvmeof_service.group }}"
        nvmeof_gw_listeners: >-
          {{
            neerali_ceph_config[neerali_ceph_cluster_name]['nvmeof']['target'][nvmeof_service.group][_subsystem]['listeners'] |
            default(_nvmeof_gw)
          }}
      ansible.builtin.include_tasks:
        file: listener.yaml
      loop: "{{ _nqns }}"
      loop_control:
        label: "{{ _subsystem }}"
        loop_var: _subsystem

    - name: Allow the given hosts
      vars:
        nvme_admin_gw: "{{ _admin_gw }}"
        nvmeof_subsystem: "{{ _subsystem ~ '.' ~ nvmeof_service.group }}"
        nvmeof_clients: >-
          {{
            neerali_ceph_config[neerali_ceph_cluster_name]['nvmeof']['target'][nvmeof_service.group][_subsystem]['allowed_hosts']
          }}
      ansible.builtin.include_tasks:
        file: nvme_clients.yaml
      loop: "{{ _nqns }}"
      loop_control:
        label: "{{ _subsystem }}"
        loop_var: _subsystem
